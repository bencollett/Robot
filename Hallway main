
import time
from machine import Pin, ADC, I2C
import def_us as us
import def_pdcontrol as pdc
import def_motorcontrol as mc
from oled import SSD1306_I2C as ss

print('hello world')

"""define global variables and arrays"""

state = 'corridor'
i2c = I2C(0, sda=Pin(12), scl=Pin(13))
rv = [0, 0]  # right us array
lv = [0, 0]  # left us array
dta = [0, 1]  # code run time array
pd = 0

while state == 'corridor':
    dt = time.time()
    dta.append(dt)
    servo = us.Servo()  # initialize Class Servo
    servo.sweep(direction='left', anglel=25, angler=150)  # sweep left
    lv1 = servo.lv
    lv.append(lv1)
    servo.sweep(direction='right', anglel=25, angler=150)  # sweep right
    rv1 = servo.rv
    rv.append(rv1)
    servo.sweep(direction='left', anglel=45, angler=130)  # sweep left
    lv1 = servo.lv
    lv.append(lv1)
    servo.sweep(direction='right', anglel=45, angler=130)  # sweep right
    rv1 = servo.rv
    rv.append(rv1)

    """us pd code"""
    control = pdc.PDControl()
    uspd = control.us_pdcontrol(lv[len(lv) - 1], lv[len(lv) - 2], rv[len(rv) - 1], rv[len(rv) - 2], dta[len(dta) - 1], dta[len(dta) - 2])
    if uspd < 30:
        pd = int(uspd)
    else:
        pd = 30

    """check for change of state"""
    # if pd = 0 and : #todo

    """Activate motor control"""
    if -15 > pd > 15:
        vel = 50
        slp = 0.08
        cv = 1
    else:
        vel = 50
        slp = 0.2
        cv = 1
    mcontrol = mc.Motorcontrol(cv)
    mcontrol.set_motor1(pd, vel, slp)

    """Activate Oled and print desired values"""
    oled = ss(128, 64, i2c)
    text1 = "pd = {}".format(pd)
    text2 = "r_s = {}".format(rv[len(rv) - 1])
    text3 = "l_s = {}".format(lv[len(lv) - 1])
    text4 = "rm = {}".format(mcontrol.vc - mcontrol.pd)
    text5 = "lm = {}".format(mcontrol.vc + mcontrol.pd)

    oled.text(str(text1), 0, 0)
    oled.text(str(text2), 0, 10)
    oled.text(str(text3), 0, 20)
    oled.text(str(text4), 0, 30)
    oled.text(str(text5), 0, 40)
    oled.show()

    # print(dta)
    # print(rv)
    # print(lv)
    # print(dta)

